# 大物实验8多普勒效应数据分析
cmc = __import__("common math calculate")
M = 0.1026  # 接收器组件质量/kg


def experiment1():
    "实验一验证多普勒效应并由此测声速"
    f0 = 40001  # 初始中心频率/Hz
    t = 24.4    # 室温/℃
    v = [0.56, 0.67, 0.83, 0.92, 0.98]      # 速度数据记录/m/s
    f = [40067, 40079, 40097, 40108, 40114] # 中心频率记录/Hz
    k, b = cmc.Least_squares(f,v,1) # 直线斜率及截距
    u = f0 * k
    print("直线斜率为%.3f/m,声速测量值为%.3f m/s。" %(k, u))
    

def experiment2():
    "研究自由落体运动并计算重力加速度"
    t = [0.05*i for i in range(1,7)]    # 采样时间点
    v1 = [0.21, 0.65, 1.12, 1.60, 2.08, 2.59]   # 第一次速度数据
    v2 = [0.19, 0.65, 1.14, 1.62, 2.09, 2.60]   # 第二次速度数据
    v3 = [0.21, 0.65, 1.12, 1.63, 2.08, 2.55]   # 第三次速度数据
    v4 = [0.17, 0.63, 1.12, 1.60, 2.09, 2.64]   # 第四次速度数据
    v = [(v1[i]+v2[i]+v3[i]+v4[i])/4 for i in range(len(v1))]   # 取平均值后的速度
    k, b = cmc.Least_squares(t, v, 1)   # 二乘法拟合曲线的斜率及截距
    print("测量重力加速度为%.3f m/s²"%(k))
    

def experiment3():
    "研究简谐振动"
    Δx = 0.11  # 弹簧伸长率/m
    m = 0.0567  # 砝码质量/kg
    g = 9.78     # 重力加速度
    k = m * g / Δx  #弹簧的劲度系数
    N2 = 23     # 第2次取到峰值时的采样序号
    N12 = 141   # 第12次取到峰值时的采样序号
    t0 = 0.1    # 采样步距/s
    T = (N12 - N2) / 10 * t0# 弹簧的振动周期
    w1 = 2 * cmc.np.pi / T  # 弹簧的振动角频率
    w0 = (k / M )**0.5       # 弹簧的固有角频率
    print("实验测得弹簧的振动角频率为%.3f rad/s,弹簧的理论固有角频率为%.3f rad/s。" %(w1, w0))
    #print(cmc.relative_error(w1, w0))

def experiment4():
    "研究匀变速直线运动，验证牛顿第二定律"
    C = 0.07    # 滑轮摩擦系数
    m0 = 0.014  # 滑轮等效质量/kg
    m = [56.79e-3, 68.82e-3, 80.84e-3, 92.88e-3]
    t = [0.1*i for i in range(1,13+1)]  # 时间注记
    v1 = [0.03, 0.28, 0.49, 0.72, 0.96, 1.19, 1.41,
          1.65, 1.88, -0.05, -0.05, 0, 0]   # 第一次速度数据
    v2 = [0.01, 0.19, 0.33, 0.47, 0.63, 0.75, 0.89,
          1.05, 1.19, 1.35, 1.48, -0.08, -0.17]   # 第二次速度数据
    v3 = [0, 0.10, 0.19, 0.26, 0.35, 0.44, 0.51,
          0.58, 0.65, 0.74, 0.82, 0.89, 0.98]   # 第三次速度数据
    v4 = [0, 0.05, 0.07, 0.08, 0.12, 0.12, 0.14,
          0.15, 0.17, 0.17, 0.21, 0.22, 0.24]   # 第四次速度数据
    x = [((1 - C)*M - m)/((1 - C)*M + m + m0) for m in m]    # 横坐标标记
    y = a = [cmc.liner_fitting(t[1:9],v1[1:9])[0], cmc.liner_fitting(t[1:9],v2[1:9])[0],cmc.
         liner_fitting(t,v3)[0],cmc.liner_fitting(t,v4)[0]]
    k, b = cmc.Least_squares(x, y, 1)
    #print(x,y,k)
    

experiment4()